# Source file thst defines the commands for sconsole.

# We only have two commands, PRIMOP & COMMAND.
# Primops are defined as a fragment of "C" code, commands are composed from primops and other words. 

typedef int16_t sc_cell_t;

typedef struct {
	sc_cell_t ustack[CONSOLE_USER_STACK_SIZE];
	sc_cell_t* sp;
	sc_cell_t err;		// Set non-zero on error.
}

#define u_pop() (*(CONTEXT.sp++))
#define u_push(x_) *--CONTEXT.sp = (sc_cell_t)(x_)
#define u_stackbase (&CONTEXT.ustack[CONSOLE_USER_STACK_SIZE])
#define u_clear() CONTEXT.sp = &ustack[CONSOLE_USER_STACK_SIZE]
#define u_tos() *CONTEXT.sp
#define u_depth() (&ustack[CONSOLE_USER_STACK_SIZE] - g_consoleContext.sp)	 

# Functions available to primops:
#  User stack: u_clear(), u_pop(), u_push(), u_tos()
#  Return stack: r_clear(), r_pop(), p_push(), r_tos()
#  IP: instruction pointer, points to byte,

PRIMOP (return) "( - ) r( addr - ) Pop return address off r-stack and load IP." [0] { IP = r_pop(); }

PRIMOP	event	"( u16: payload u8:id - ) Send event up to PC containing top stack value"  [-2] {
        int8_t id = pop();
        int16_t val = pop();
        event(id, val);
    }
PRIMOP 	lit8	"( - v8) Pushes next byte in instruction stream." [1, hide] { push(memget8(IP++)); }
PRIMOP 	lit16	"( - v8) Pushes next word in instruction stream." [1, hide] { push(memget16(IP)); IP += 2; }

PRIMOP 	c@		"{addr - v8) Fetch 8 bit value from address." [-1] { tos() = memget8(tos()); }
PRIMOP 	c!		"{v addr - ) Store 8 bit value at address." [-2] { uint16_t addr = pop(); memput8(addr, pop()); }
PRIMOP 	@		"{addr - v) Fetch  bit value from address." [-1] { tos() = memget16(tos()); }
PRIMOP 	!		"{v addr - ) Store 16 bit value at address." [-2] { uint16_t addr = pop(); memput16(addr, pop()); }
PRIMOP  +		"(v:arg1 v:arg2 - v:result) Add 2 values, push result." [-2] { BINOP(+); }
PRIMOP  -		"(v:arg1 v:arg2 - v:result) Add 2 values, push result." [-2] { BINOP(-); }
PRIMOP  *		"(v:arg1 v:arg2 - v:result) Add 2 values, push result." [-2] { BINOP(*); }
PRIMOP  /		"(v:arg1 v:arg2 - v:result) Add 2 values, push result." [-2] { BINOP(/); }
PRIMOP  mod		"(v:arg1 v:arg2 - v:result) Add 2 values, push result." [-2] { BINOP(%); }
PRIMOP  and		"(v:arg1 v:arg2 - v:result) Add 2 values, push result." [-2] { BINOP(&); }
PRIMOP  or		"(v:arg1 v:arg2 - v:result) Add 2 values, push result." [-2] { BINOP(|); }
PRIMOP  xor		"(v:arg1 v:arg2 - v:result) Add 2 values, push result." [-2] { BINOP(^); }
PRIMOP  shl		"(v:arg1 v:arg2 - v:result) Add 2 values, push result." [-2] { BINOP(<<); }
PRIMOP  shr		"(v:arg1 v:arg2 - v:result) Add 2 values, push result." [-2] { BINOP(>>); }
PRIMOP  =		"(v:arg1 v:arg2 - v:result) Add 2 values, push result." [-2] { BINOP(==); }
        bind(13, add);                       Add,                   "+",                     13  // y x         - sum 
        bind(14, sub);                       Subtract,              "-",                     14  // y x         - diff 
        bind(15, mul);                       Multiply,              "*",                     15  // y x         - prod 
        bind(16, div);                       Divide,                "/",                     16  // y x         - quot 
        bind(17, mod);                       Modulus,               "mod",                   17  // y x         - rem 
        bind(18, andb);                      And,                   "and",                   18  // y x         - result 
        bind(19, orb);                       Or,                    "or",                    19  // y x         - result 
        bind(20, xorb);                      ExclusiveOr,           "xor",                   20  // y x         - result 
        bind(21, shift);                     Shift,                 "shift",                 21  // x bits      - result 
        bind(22, eq);                        Equal,                 "=",                     22  // y x         - pred 
        bind(23, neq);                       NotEqual,              "<>",                    23  // y x         - pred 
        bind(24, gt);                        Greater,               ">",                     24  // y x         - pred 
        bind(25, geq);                       GreaterOrEqual,        ">=",                    25  // y x         - pred 
        bind(26, lt);                        Less,                  "<",                     26  // y x         - pred 
        bind(27, leq);                       LessOrEqual,           "<=",                    27  // y x         - pred 

VAR 

        //bind(0,  ret);				[Return,                "(return)",              0   //             -  (from return)
        //bind(1,  lit8);                      
        //bind(2,  lit16);                     
        bind(3,  quote);                     
        bind(4,  eventHeader);               EventHeader,           "event{",                4   // id          - 
        //bind(5,  eventBody8);              EventBody8,            "cdata",                 5   // val         - 
        bind(6,  eventBody16);               EventBody16,           "data",                  6   // val         - 
        bind(7,  eventFooter);               EventFooter,           "}event",                7   //             - 
        bind(8,  eventOp);                     Event,                 "event",                 8   // val id      - 
        //bind(9,  fetch8);                    Fetch8,                "c@",                    9   // addr        - val 
        //bind(10, store8);                    Store8,                "c!",                    10  // val addr    - 
        //bind(11, fetch16);                   Fetch16,               "@",                     11  // addr        - val 
        //bind(12, store16);                   Store16,               "!",                     12  // val addr    - 
        bind(13, add);                       Add,                   "+",                     13  // y x         - sum 
        bind(14, sub);                       Subtract,              "-",                     14  // y x         - diff 
        bind(15, mul);                       Multiply,              "*",                     15  // y x         - prod 
        bind(16, div);                       Divide,                "/",                     16  // y x         - quot 
        bind(17, mod);                       Modulus,               "mod",                   17  // y x         - rem 
        bind(18, andb);                      And,                   "and",                   18  // y x         - result 
        bind(19, orb);                       Or,                    "or",                    19  // y x         - result 
        bind(20, xorb);                      ExclusiveOr,           "xor",                   20  // y x         - result 
        bind(21, shift);                     Shift,                 "shift",                 21  // x bits      - result 
        bind(22, eq);                        Equal,                 "=",                     22  // y x         - pred 
        bind(23, neq);                       NotEqual,              "<>",                    23  // y x         - pred 
        bind(24, gt);                        Greater,               ">",                     24  // y x         - pred 
        bind(25, geq);                       GreaterOrEqual,        ">=",                    25  // y x         - pred 
        bind(26, lt);                        Less,                  "<",                     26  // y x         - pred 
        bind(27, leq);                       LessOrEqual,           "<=",                    27  // y x         - pred 
        bind(28, notb);                      Not,                   "not",                   28  // x           - result 
        bind(29, neg);                       Negate,                "neg",                   29  // x           - -x 
        bind(30, inc);                       Increment,             "1+",                    30  // x           - x+1 
        bind(31, dec);                       Decrement,             "1-",                    31  // x           - x-1 
        bind(32, drop);                      Drop,                  "drop",                  32  // x           - 
        bind(33, dup);                       Duplicate,             "dup",                   33  // x           - x x 
        bind(34, swap);                      Swap,                  "swap",                  34  // y x         - x y 
        bind(35, pick);                      Pick,                  "pick",                  35  // n           - val 
        bind(36, roll);                      Roll,                  "roll",                  36  // n           - 
        bind(37, clr);                       Clear,                 "clear",                 37  //             - 
        bind(38, pushr);                     Push,                  "push",                  38  // x           -   (to return) 
        bind(39, popr);                      Pop,                   "pop",                   39  //             - x (from return) 
        bind(40, peekr);                     Peek,                  "peek",                  40  //             - x (from return) 
        bind(41, forget);                    Forget,                "forget",                41  // addr        - 
        bind(42, call);                      Call,                  "call",                  42  // addr        - 
        bind(43, choice);                    Choice,                "choice",                43  // q p         - 
        bind(44, chooseIf);                  If,                    "if",                    44  // q           - 
        bind(45, loopTicks);                 LoopTicks,             "loopTicks",             45  //             - 
        bind(46, setLoop);                   SetLoop,               "setLoop",               46  // addr        - 
        bind(47, stopLoop);                  StopLoop,              "stopLoop",              47  //             - 
        bind(48, resetBoard);                Reset,                 "(reset)",               48  //             - 
        bind(49, pinMode);                   PinMode,               "pinMode",               49  // mode pin    - 
        bind(50, digitalRead);               DigitalRead,           "digitalRead",           50  // pin         - val 
        bind(51, digitalWrite);              DigitalWrite,          "digitalWrite",          51  // val pin     - 
        bind(52, analogRead);                AnalogRead,            "analogRead",            52  // pin         - val 
        bind(53, analogWrite);               AnalogWrite,           "analogWrite",           53  // val pin     - 
        bind(54, attachISR);                 AttachISR,             "attachISR",             54  // addr i mode - 
        bind(55, detachISR);                 DetachISR,             "detachISR",             55  // i           - 
        bind(56, milliseconds);              Milliseconds,          "milliseconds",          56  //             - millis 
        bind(57, pulseIn);                   PulseIn,               "pulseIn",               57] // val pin     - duration 
        bind(58, next);
        bind(59, nop);



    /* Binary and unary ALU operations pop one or two values and push back one. These include basic
    arithmetic, bitwise operations, comparison, etc.
    
    The truth value used in Brief is all bits reset (-1) and so the bitwise `and`/`or`/`not` words
    serve equally well as logical operators. */

    void add()
    {
        int16_t x = pop();
        *s = *s + x;
    }

    void sub()
    {
        int16_t x = pop();
        *s = *s - x;
    }

    void mul()
    {
        int16_t x = pop();
        *s = *s * x;
    }

    void div()
    {
        int16_t x = pop();
        *s = *s / x;
    }

    void mod()
    {
        int16_t x = pop();
        *s = *s % x;
    }

    void andb()
    {
        int16_t x = pop();
        *s = *s & x;
    }

    void orb()
    {
        int16_t x = pop();
        *s = *s | x;
    }

    void xorb()
    {
        int16_t x = pop();
        *s = *s ^ x;
    }

    void shift()
    {
        int16_t x = pop(); // negative values shift left, positive right
        if (x < 0) *s = *s << -x;
        else *s = *s >> x;
    }

    inline int16_t boolval(int16_t b) // helper (not Brief instruction)
    {
        // true is all bits on (works for bitwise and logical operations alike)
        return b ? 0xFFFF : 0;
    }

    void eq()
    {
        int16_t x = pop();
        *s = boolval(*s == x);
    }

    void neq()
    {
        int16_t x = pop();
        *s = boolval(*s != x);
    }

    void gt()
    {
        int16_t x = pop();
        *s = boolval(*s > x);
    }

    void geq()
    {
        int16_t x = pop();
        *s = boolval(*s >= x);
    }

    void lt()
    {
        int16_t x = pop();
        *s = boolval(*s < x);
    }

    void leq()
    {
        int16_t x = pop();
        *s = boolval(*s <= x);
    }

    void notb()
    {
        *s = ~(*s);
    }

    void neg()
    {
        *s = -(*s);
    }

    void inc()
    {
        *s = *s + 1;
    }

    void dec()
    {
        *s = *s - 1;
    }

    /* Stack manipulation instructions */

    void drop()
    {
        s--;
    }

    void dup()
    {
        push(*s);
    }

    void swap()
    {
        int16_t t = *s;
        int16_t* n = s - 1;
        *s = *n; *n = t;
    }

    void pick() // nth item to top of stack
    {
        int16_t n = pop();
        push(*(s - n));
    }

    void roll() // top item slipped into nth position
    {
        int16_t n = pop(), t = *(s - n);
        int16_t* i;
        for (i = s - n; i < s; i++)
        {
            *i = *(i + 1);
        }
        *s = t;
    }

    void clr() // clear stack
    {
        s = dstack;
    }

    /* Moving items between data and return stack. The return stack is commonly also used to store data
    that is local to a subroutine. It is safe to push data here to be recovered after a subroutine
    call. It is not safe to use it for passing data between subroutines. That is what the data stack
    is for. Think of arguments vs. locals. The normal way of handling locals in Brief that need to
    survive a call and return from another word is to store them on the return stack. */

    void pushr()
    {
        rpush(pop());
    }

    void popr()
    {
        push(rpop());
    }

    void peekr()
    {
        push(*r);
    }

    /* Dictionary manipulation instructions:

    The `forget` function is a Forthism for reverting to the address of a previously defined word;
    essentially forgetting it and any (potentially dependent words) defined thereafter. */

    void forget() // revert dictionary pointer to TOS
    {
        int16_t i = pop();
        if (i < here) here = i; // don't "remember" random memory!
    }

    /* A `call` instruction pops an address and calls it; pushing the current `p` as to return. */

    void call()
    {
        rpush(p);
        p = pop();
    }

    /* Quotations and `choice` need some explanation. The idea behind quotations is something like
    an anonymous lambda and is used with some nice syntax in the Brief language. The `quote`
    instruction precedes a sequence that is to be treated as an embedded definition
    essentially. It takes a length as an operand, pushes the address of the sequence of code
    following and then jumps over that code.

    The net result is that the sequence is not executed, but its address is left on the stack
    for future words to call as they see fit.

    One primitive that makes use of this is `choice` which is the idiomatic Brief conditional.
    It pops two addresses (likely from two quotations) along with a predicate value (likely the
    result of some comparison or logical operations). It then executes one or the other
    quotation depending on the predicate.

    Another primitive making use of quotations is `chooseIf` (called simply `if` in Brief) which
    pops a predicate and a single address; calling the address if non-zero.

    Many secondary words in Brief also use quotation such as `bi`, `tri`, `map`, `fold`, etc.
    which act as higher-order functions. */

    void quote()
    {
        uint8_t len = memget(p++);
        push(p); // address of quotation
        p += len; // jump over
    }

    void choice()
    {
        int16_t f = pop(), t = pop();
        rpush(p);
        p = pop() == 0 ? f : t;
    }

    void chooseIf()
    {
        int16_t t = pop();
        if (pop() != 0)
        {
            rpush(p);
            p = t;
        }
    }

    void next()
    {
        int16_t count = rpop() - 1;
        int16_t rel = memget(p++);
        if (count > 0)
        {
            rpush(count);
            p -= (rel + 2);
        }
    }

    void nop()
    {
    }

    /* A Brief word (address) may be set to run in the main loop. Also, a loop counter is
    maintained for use by conditional logic (throttling for example). */

    int16_t loopword = -1; // address of loop word

    int16_t loopIterations = 0; // number of iterations since 'setup' (wraps)

    void loopTicks()
    {
        push(loopIterations & 0x7FFF);
    }

    void setLoop()
    {
        loopIterations = 0;
        loopword = pop();
    }

    void stopLoop()
    {
        loopword = -1;
    }

    /* Upon first connecting to a board, the PC will execute a reset so that assumptions about
    dictionary contents and such hold true. */ 

    void resetBoard() // likely called initialy upon connecting from PC
    {
        clr();
        here = last = 0;
        loopword = -1;
        loopIterations = 0;
    }

    /* Here begins all of the Arduino-specific instructions.

    Starting with basic setup and reading/write to GPIO pins. Note we treat `HIGH`/`LOW` values as
    Brief-style booleans (-1 or 0) to play well with the logical and conditional operations. */

    void pinMode()
    {
        ::pinMode(pop(), pop());
    }

    void digitalRead()
    {
        push(::digitalRead(pop()) ? -1 : 0);
    }

    void digitalWrite()
    {
        ::digitalWrite(pop(), pop() == 0 ? LOW : HIGH);
    }

    void analogRead()
    {
        push(::analogRead(pop()));
    }

    void analogWrite()
    {
        ::analogWrite(pop(), pop());
    }

    /* I2C support comes from several instructions, essentially mapping composable, zero-operand
    instructions to functions in the Arduino library:

    http://arduino.cc/en/Reference/Wire

    Brief words (addresses/quotations) may be hooked to respond to Wire events. */

    void wireBegin()
    {
        Wire.begin(); // join bus as master (slave not supported)
    }

    void wireRequestFrom()
    {
        Wire.requestFrom(pop(), pop());
    }

    void wireAvailable()
    {
        push(Wire.available());
    }

    void wireRead()
    {
        while (Wire.available() < 1);
        push(Wire.read());
    }

    void wireBeginTransmission()
    {
        Wire.beginTransmission((uint8_t)pop());
    }

    void wireWrite()
    {
        Wire.write((uint8_t)pop());
    }

    void wireEndTransmission()
    {
        Wire.endTransmission();
    }

    int16_t onReceiveWord = -1;

    void wireOnReceive(int16_t count)
    {
        if (onReceiveWord != -1)
        {
            push(count);
            exec(onReceiveWord);
        }
    }

    void wireSetOnReceive()
    {
        onReceiveWord = pop();
        Wire.onReceive(wireOnReceive);
    }

    int16_t onRequestWord = -1;

    void wireOnRequest()
    {
        if (onRequestWord != -1)
        {
            exec(onRequestWord);
        }
    }

    void wireSetOnRequest()
    {
        onRequestWord = pop();
        Wire.onRequest(wireOnRequest);
    }

    /* Brief word addresses (or quotations) may be set to run upon interrupts. For more info on
    the argument values and behavior, see:

    http://arduino.cc/en/Reference/AttachInterrupt

    We keep a mapping of up to MAX_INTERRUPTS (6) words. */

    int16_t isrs[MAX_INTERRUPTS];

    void interrupt(int16_t n) // helper (not Brief instruction)
    {
        int16_t w = isrs[n];
        if (w != -1) exec(w);
    }

    void interrupt0() // helper (not Brief instruction)
    {
        interrupt(0);
    }

    void interrupt1() // helper (not Brief instruction)
    {
        interrupt(1);
    }

    void interrupt2() // helper (not Brief instruction)
    {
        interrupt(2);
    }

    void interrupt3() // helper (not Brief instruction)
    {
        interrupt(3);
    }

    void interrupt4() // helper (not Brief instruction)
    {
        interrupt(4);
    }

    void interrupt5() // helper (not Brief instruction)
    {
        interrupt(5);
    }

    void interrupt6() // helper (not Brief instruction)
    {
        interrupt(6);
    }

    void attachISR()
    {
        uint8_t mode = pop();
        uint8_t interrupt = pop();
        isrs[interrupt] = pop();
        switch (interrupt)
        {
            case 0 : attachInterrupt(0, interrupt0, mode);
            case 1 : attachInterrupt(1, interrupt1, mode);
            case 2 : attachInterrupt(2, interrupt2, mode);
            case 3 : attachInterrupt(3, interrupt3, mode);
            case 4 : attachInterrupt(4, interrupt4, mode);
            case 5 : attachInterrupt(5, interrupt5, mode);
            case 6 : attachInterrupt(6, interrupt6, mode);
        }
    }

    void detachISR()
    {
        int interrupt = pop();
        isrs[interrupt] = -1;
        detachInterrupt(interrupt);
    }

    /* A couple of stragglers... */

    void milliseconds()
    {
        push(millis());
    }

    void pulseIn()
    {
        push(::pulseIn(pop(), pop()));
    }

    /* The Brief VM needs to be hooked into the main setup and loop on the hosting project.
    A minimal *.ino would contain something like:

    #include <Brief.h>

    void setup()
    {
        brief::setup();
    }

    void loop()
    {
        brief::loop();
    }

    Brief setup binds all of the instruction functions from above. After setup, the hosting
    project is free to bind its own custom functions as well!
    
    An example of this could be to add a `delayMillis` instruction. Such an instruction is not
    included in the VM to discourage blocking code, but you're free to add whatever you like:
    
    void delayMillis()
    {
        delay((int)brief::pop());
    }

    void setup()
    {
        brief::setup(19200);
        brief::bind(100, delayMillis);
    }

    This adds the new instruction as opcode 100. You can then give it a name and tell the compiler
    about it with `compiler.Instruction("delay", 100)` in PC-side code or can tell the Brief
    interactive about it with `100 'delay instruction`. This is the extensibility story for Brief.
    
    Notice that custom instruction function may retrieve and return values via the
    `brief::pop()` and `brief::push()` functions, as well as raise errors with
    `brief::error(uint8_t code)`. */

    void setup()
    {
        Serial.begin(19200); // assumed by interactive
        resetBoard();


        for (int16_t i = 0; i < MAX_INTERRUPTS; i++)
        {
            isrs[i] = -1;
        }

        event(BOOT_EVENT_ID, 0); // boot event
    }

    /* The payload from the PC to the MCU is in the form of Brief code. A header byte indicates
    the length and whether the code is to be executed immediately (0x00) or appended to the
    dictionary as a new definition (0x01).

    A dictionary pointer is maintained at the MCU. This pointer always references the first
    available free byte of dictionary space (beginning at address 0x0000). Each definition sent to
    the MCU is appended to the end of the dictionary and advances the pointer. The bottom end of the
    dictionary space is used for arguments (mainly for IL, not idiomatic Brief).

    If code is a definition then it is expected to already be terminated by a `return` instruction (if
    appropriate) and so we do nothing at all; just leave it in place and leave the `here` pointer
    alone.

    If code is to be executed immediately then a return instruction is appended and exec(...) is
    called on it. The dictionary pointer (`here`) is restored; reclaiming this memory. */

    void loop()
    {
        if (Serial.available())
        {
            int8_t b = Serial.read();
            bool isExec = (b & 0x80) == 0x80;
            int8_t len = b & 0x7f;
            for (; len > 0; len--)
            {
                while(!Serial.available());
                memset(here++, Serial.read());
            }

            if (isExec)
            {
                memset(here++, 0); // ensure return
                here = last;
                exec(here);
            }
            else
            {
                last = here;
            }
        }

        if (loopword >= 0)
        {
            exec(loopword);
            loopIterations++;
        }
    }
}
